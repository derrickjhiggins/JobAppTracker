import React from 'react';

function HomePage() {
    return (
        <>
            <h2>Web Devevelopment Concepts</h2>
            <nav class="intraNav">
                <a href="#servers">Web Servers</a>
                <a href="#frontend">Frontend Design</a>
                <a href="#images">Optimizing Images</a>
                <a href="#CSS">Cascading Style Sheets</a>
                <a href="#Forms">Forms</a>
                <a href="#Express">Express</a>
                <a href="#Javascript">Javascript</a>
                <a href="#DOM">Testing DOM Changes using Random Data</a>
            </nav>
            <article id="servers">
                <h3>Web Servers</h3>
                <p>The file at the path \index.html is called the designated homepage of a web <strong>server</strong>. Most web <strong>servers</strong> are configured so that the request for / is mapped to the file at the path /index.html. In almost all real-world web applications, the file <strong>index.html</strong> in the root directory is called the homepage of the web application, and the web application is configured to return this file whenever a <strong>GET request</strong> is received for the <strong>URL</strong> /. So when a visitor enters a website, the web <strong>server</strong> will look for the <strong>index</strong> file and display it to the user.</p>

                <p>When inspecting my index.html file on my local Chrome browser, I see a <strong>request</strong> for the index.html file. This <strong>GET request</strong> has a status code of 200, with a content type of text/html. The response shows the file I have created as it appears in VS Code. When viewing the page on my OSU web <strong>server</strong>, there are five requests. The first is for a1-higginde/ which, as explains above, maps to the index.html file, and also has a 200 status code. The second request is a GET request for the executor.js file, which has a status code of 200 and a content-type of text/javascript. The third request is <strong>favicon.ico</strong>, which has a status code of 200. The final two requests are for main.css and main.js.</p>

                <p>The <strong>favicon.ico</strong> file has a status of 200 because the OSU <strong>server</strong> provides this automatically. The main.css and main.js files, however, are not provided automatically. Since we have not created a <strong>CSS</strong> or <strong>JS</strong> file for this assignment, their status codes are both 404. If we had created a <strong>CSS</strong> and <strong>JS</strong> file and uploaded these to the OSU <strong>server</strong>, their status codes would change from 404.</p>

                <p>The parts of the URL to my web file are easily identifiable. The scheme is https://, which tells me we are using <strong>hypertext transfer protocol secure</strong> for the web page. The <strong>subdomain</strong> is web.engr and the <strong>host domain</strong> is oregonstate.edu/. The resource we are accessing from the OSU <strong>server</strong> is found in the path ~higginde/a1-higginde/. This path shows we are accessing my <strong>server</strong> location and then accessing the index.html file in the a1-higginde folder.</p>
            </article>
            <article id="frontend">
                <h3>Frontend Design</h3>
                <p><strong>Frontend design</strong> is the process of creating the user experience of a website. When a user visits a website, they will see a graphical user-interface (GUI), as well as other ways to interact with and navigate through the website. Frontend design aims to create a website with high <strong>usability</strong> so that a user enjoys their experience on a website. Following certain guidelines will help to ensure that a website's frontend design is optimal and meets the needs of the user, while creating an enjoyable experience. Websites should have a consistent color scheme and a GUI that is easy to navigate. Fonts should be legible and all media should load quickly and clearly. Now, let's discuss the five "E"s of <strong>usability</strong>, which help us to quantify the user experience.</p>
                <dl>
                    <dt><strong>Effective</strong></dt>
                    <dd>Is the website effective in helping users to achieve their goals when visiting the site, with high accuracy of results? </dd>
                    <dt><strong>Efficient</strong></dt>
                    <dd>Is the website efficient? Are goals reachable in the least amount of steps possible, helping to save the user time?</dd>
                    <dt><strong>Easy to Navigate</strong></dt>
                    <dd>Consider the perspective of a new user. Is the website easy to navigate for this new user, or does the user feel confused about how to reach different parts of the website?</dd>
                    <dt><strong>Error-free</strong></dt>
                    <dd>Keeping a website error-free ensures that the website meets accessibility needs. Does the user face any obstacles when trying to achieve their goals when using the website?</dd>
                    <dt><strong>Enjoyable</strong></dt>
                    <dd>Is the website enjoyable and engaging for its intended audience? Is the website enjoyable enough to prompt the user to return to the website after visiting for the first time?</dd>
                </dl>
                <p>When considering the design of a website, it is important to consider how a site is organized. This organization is accomplished with <strong>page layout tags</strong>. These tags are used to section off a website into various pieces of content. This does have a visual effect, although visual detailing is typically accomplished with CSS. More importantly, page layout tags help other machines (such as screen readers or search engine optimization (SEO) robots) how a web page is sectioned off. Some examples of page layout tags are <strong>&lt;header&gt;</strong>, <strong>&lt;nav&gt;</strong>, <strong>&lt;main&gt;</strong>, <strong>&lt;section&gt;</strong>, and <strong>&lt;footer&gt;</strong>. The <strong>&lt;header&gt;</strong> element denotes the banner of a website. It usually includes pertinent, information such as the name and marketing slogan. The <strong>&lt;nav&gt</strong>; element makes site navigation functional and easier for users. This allows users to navigate from page to page or to specific sections of the current page. The <strong>&lt;main&gt;</strong> is the primary block which holds content like information, galleries, or stories. The <strong>&lt;section&gt;</strong> element helps to section off a webpage by making a thematic grouping of content. Sections should only be used for content that is all related. The <strong>&lt;article&gt;</strong> element is usually used within a &lt;section&gt; and refers to a single specific topic using an &lt;h2&gt;. The <strong>&lt;footer&gt;</strong> element is below the tag and usually holds legal information such as copyright information, contact information, and further links to any critical pages.</p>
                <p>The <strong>anchor</strong> element &lt;a&gt; is used to link from one section or page to another. <strong>Anchor</strong> elements include an href attribute, so the programmer can specify the <strong>URL</strong> where the link will take the user. An example <strong>anchor</strong> tag is &lt;a href="https://www.google.com/"&gt;Google Search&lt;/a&gt;. A key difference to note between text <strong>anchors</strong> and <strong>navigation</strong> is that <strong>navigation</strong> provides an overall structure and system for moving between pages or sections within a site or application, while text <strong>anchors</strong> provide a way to link directly to specific sections of a page.</p>
            </article>
            <article id="images">
                <h3>Optimizing Images</h3>
                <p>The six major specifications of images for the web are a <strong>descriptive file name</strong>, a <strong>small file size</strong>, <strong>exact dimensions</strong>, <strong>correct file format</strong>, <strong>reduced resolution</strong>, and <strong>color mode</strong>. A <strong>descriptive file name</strong> helps to improve SEO. File names should be descriptive but also concise so SEO bots can properly categorize images for search. A <strong>small file size</strong> allows for a fast website load time. This directly relates to achieving a high-quality user experience, and can be achieved through image compression or srcset="" and sizes="" attributes. <strong>Exact dimensions</strong> ensure that images fit the dimensions of our web page. Correct <strong>file formats</strong> must be used, which we will discuss in more detail next. A <strong>reduced resolution</strong> allows webpages to render appropriately on older monitors, which had a default of 72 pixels per inch (PPI). Due to increasing resolution sizes, providing multiple image sizes for each type of monitor is becoming a standard. Using the correct <strong>color mode</strong> (<strong>RGB</strong> for .PNG, .JPG, .SVG, and .WebP, and Indexed for .GIF) ensures that images and GIFs will render properly.</p>
                <p>When choosing a file format, developers should consider the type of images which need to be displayed. Typically, online photos are set as .JPG files. A benefit of <strong>.JPG</strong> files is they can compress down to small file sizes while remaining rectangular. Line-art images (logos, icons, etc.) are usually <strong>.GIF</strong> and sometimes 8-bit <strong>.PNG</strong> files. .GIF files can provide animation, while .PNG files can be placed over a wide palette of colors without distorting.</p>
            </article>
            <article id="CSS">
                <h3>Cascading Style Sheets</h3>
                <p><strong>Cascading Style Sheets</strong> (CSS) is an essential part of modern web development, allowing designers and developers to separate the presentation of a website from its underlying structure and content. By using <strong>CSS</strong> to define the layout, typography, colors, and other visual properties of a website, developers can create beautiful and consistent designs that are easy to maintain and update. <strong>CSS</strong> is the language which allows developers to provide structure and rules for how the contents of a webpage should look and behave during use. <strong>CSS</strong> is used to adhere to brand standards (brand color-palettes, custom website behavior, etc.) Although <strong>HTML</strong> elements are predefined with style, <strong>CSS</strong> can override these pre-definitions, making it a powerful tool for stylistic choice.</p>
                <p>There are five different ways styles can be incorporated into a website. The most common method is externally linking a .CSS file like this: &lt;link rel="stylesheet" href="App.css"/&gt;. A second possibility is by embedding styles directly in <strong>HTML</strong> and <strong>JavaScript</strong> files within style tags. Developers typically use this method only for one-off style changes. A third method is by embedding inline within an element using an attribute and value, like this: &lt;h1 style="color:orange"&gt;. A fourth method is embedding style in JavaScript template literals within a <strong>JavaScript</strong> function. A fifth and final method is by using regular <strong>JavaScript</strong> to manipulate the <strong>Document Object Model</strong> (DOM), like this: document.getElementsByTagName('h1').style.color = 'orange';. It is important to remember that developers typically only use the final four methods listed here for one-off style changes, and typically use method one (externally linked .CSS file).</p>
            </article>
            <article id="Forms">
                <h3>Forms</h3>
                <p>There are six major goals of <strong>accessible</strong> forms. They are as follows: Provide clear instructions, Let users know why you're gather the data and which fields are required, Set the first field to autofocus, Ensure each form control can be filled i nusing the keyboard, Add tab indexing to complex forms, and Ensure validation messages are screen readable. The purpose of these goals is to satisfy the requirements of the Americans with Disabilities Act, as well as generally make our website more user-friendly.</p>
                <p>The major tags for forms are <strong>&lt;form&gt;</strong>, <strong>&lt;input&gt;</strong>, and <strong>&lt;textarea&gt;</strong>. The form tag adds a form to an HTML document. Input elements are where the user will type data or select options to submit. The textarea tag allows for multiline input. Some attributes of these tags are <strong>action</strong> and <strong>method</strong>. The action tag specifies where the request of the from should be sent. This can be either <strong>GET</strong> or <strong>POST</strong>. Some important form style recommendations to improve usability are things such as using an asterisk for required fields, changing the default values of fieldset{}, and accomodating fat fingers and arthritic hands by increasing the font size and padding. All of these play a vital role in increasing our forms accessibility and making our website more user-friendly.</p>
            </article>
            <article id="Express">
                <h3>Express</h3>
                <p><strong>Node.js</strong>, <strong>npm</strong>, and <strong>Express</strong> are three popular web development tools. <strong>Node.js</strong> lets developers run <strong>JavaScript</strong> on the server-side, while npm is a package manager for <strong>Node.js</strong>. <strong>Express</strong> is a framework that simplifies web application development by providing features like routing and middleware support. These tools allow developers to build web applications using <strong>JavaScript</strong> and add functionality with pre-built code. By using these tools, developers can build websites and applications more easily and quickly. Using <strong>Node.js</strong>, <strong>npm</strong>, and <strong>Express</strong> can make web development easier for beginners. With these tools, even someone who doesn't have much coding experience can build a simple web application. These technologies allow developers to write code in JavaScript, a language that many people are already familiar with, and easily integrate pre-built packages to add functionality to their projects. With the help of <strong>Node.js</strong>, <strong>npm</strong>, and <strong>Express</strong>, anyone can build a website or application without being a coding genius.</p>
            </article>
            <article id="Javascript">
                <h3>JavaScript</h3>
                <p><strong>JavaScript</strong> is a popular programming language used for creating interactive web pages and web applications. Its main data types include <strong>strings</strong>, <strong>numbers</strong>, <strong>booleans</strong>, <strong>undefined</strong>, <strong>null</strong>, and <strong>symbols</strong>. Strings are used for storing and manipulating text, while numbers are used for mathematical calculations. Booleans represent true or false values, and undefined represents a variable that has not been assigned a value.</p>
                <p><strong>Objects</strong>, <strong>arrays</strong>, and <strong>JSON</strong> are commonly used in JavaScript. Objects are used to store data in key-value pairs. Arrays are used to store lists of data, and can also contain other arrays or objects. <strong>JSON</strong>, or JavaScript Object Notation, is commonly used to send data between a server and a web application. Conditionals and loops are essential components of <strong>JavaScript</strong>. Conditionals are used to make decisions in code, such as if-else statements or switch statements. This allows the programmer to create dynamic programs that branch to differing outcomes based on differing input. Loops are used to execute a block of code repeatedly, such as for loops or while loops.</p>
                <p><strong>JavaScript</strong> supports both <strong>object-oriented programming</strong> and functional programming paradigms. Object-oriented programming (OOP) involves creating objects with their own properties and methods, and interacting with those objects. <strong>Functional programming</strong> involves using functions to perform operations on data, and emphasizes immutability and pure functions. Both paradigms have their own strengths and weaknesses, and can be used to solve different programming problems. OOP in particularly has seen a striking rise in popularity over the last few decades.</p>
            </article>
            <article id="DOM">
                <h3>Testing DOM Changes using Random Data</h3>
                <p>When developers change how a webpage looks or works using <strong>JavaScript</strong> and <strong>Express</strong>, they need to make sure everything is still okay. This is accomplished by testing <strong>DOM</strong> changes with random data. This testing is like pretending to be a user who does random things on the webpage. By doing this, developers can find and fix any problems or mistakes that might happen. It's important because they want the webpage to work well and look good for everyone who uses it in order to maintain high usability and webpage efficiency. So, testing with random data helps them make sure that the webpage is still working smoothly and there are no malfunctions.</p>
            </article>
         </>
    );
}

export default HomePage;